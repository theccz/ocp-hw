kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "tasks-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        node 
        {
         stage('Build Tasks app')
           {
           openshiftBuild bldCfg: 'tasks', env: [], namespace: 'tasks-build', showBuildLogs: 'true', verbose: 'false', waitTime: '', waitUnit: 'sec'
           openshiftVerifyBuild bldCfg: 'tasks', checkForTriggeredDeployments: 'false', namespace: 'tasks-build', verbose: 'false', waitTime: ''
           }
         stage('Tag Tasks Image')
           {
           openshiftTag alias: 'false', destStream: 'tasks', destTag: '${BUILD_NUMBER}', destinationAuthToken: '', destinationNamespace: 'tasks-build', namespace: 'tasks-build', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
           }
         stage('Deploy new image') 
           {
           echo "Setting the image"
           sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/tasks-build/tasks:'${BUILD_NUMBER}' -n tasks-build"

           echo "Deploying the image"

           openshiftDeploy depCfg: 'tasks', namespace: 'tasks-build', verbose: 'false', waitTime: '', waitUnit: 'sec'
           openshiftVerifyDeployment depCfg: 'tasks', namespace: 'tasks-build', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
           openshiftVerifyService namespace: 'tasks-build', svcName: 'tasks', verbose: 'false'
           }
         stage('Test build route')
           {
           echo "Running Integration Tests"
           // wait for things to come up
           sleep 15
    
           // not much status checking going on here, but its painful doing this from sh/curl hack
           // should be doing this from Java or Groovy UrlConnection
           sh "curl -i -X GET http://\$(oc get route -n tasks-build  -o jsonpath='{.items[*].spec.host}') | grep 'OpenShift Tasks Demo'"
           }
         stage('Tag for Dev')
           {
           openshiftTag alias: 'false', destStream: 'tasks', destTag: 'dev', destinationAuthToken: '', destinationNamespace: 'tasks-dev', namespace: 'tasks-build', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
           }
         stage('Deploy for Dev')
           {
           echo "Setting the image"
           sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/tasks-dev/tasks:dev -n tasks-dev"

           echo "Deploying the image"

           openshiftDeploy depCfg: 'tasks', namespace: 'tasks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
           openshiftVerifyDeployment depCfg: 'tasks', namespace: 'tasks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
           openshiftVerifyService namespace: 'tasks-dev', svcName: 'tasks', verbose: 'false'
           }
         stage('Tag for Test')
           {
           openshiftTag alias: 'false', destStream: 'tasks', destTag: 'test', destinationAuthToken: '', destinationNamespace: 'tasks-test', namespace: 'tasks-build', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
           }
         stage('Deploy for Test')
           {
           echo "Setting the image"
           sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/tasks-test/tasks:test -n tasks-test"

           echo "Deploying the image"

           openshiftDeploy depCfg: 'tasks', namespace: 'tasks-test', verbose: 'false', waitTime: '', waitUnit: 'sec'
           openshiftVerifyDeployment depCfg: 'tasks', namespace: 'tasks-test', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
           openshiftVerifyService namespace: 'tasks-test', svcName: 'tasks', verbose: 'false'
           }
         stage('Tag for Prod')
           {
           openshiftTag alias: 'false', destStream: 'tasks', destTag: 'prod', destinationAuthToken: '', destinationNamespace: 'tasks-prod', namespace: 'tasks-build', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
           }
         stage('Deploy for Prod')
           {
           echo "Setting the image"
           sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/tasks-prod/tasks:prod -n tasks-prod"

           echo "Deploying the image"

           openshiftDeploy depCfg: 'tasks', namespace: 'tasks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
           openshiftVerifyDeployment depCfg: 'tasks', namespace: 'tasks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
           openshiftVerifyService namespace: 'tasks-prod', svcName: 'tasks', verbose: 'false'
           }

        }
    type: JenkinsPipeline

